{"version":3,"sources":["/Users/thejameskyle/git/marionette/metal.js/src/metal.js"],"names":[],"mappings":"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","file":"metal.min.js","sourcesContent":["(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['lodash'], factory);\n  } else if (typeof exports !== 'undefined') {\n    module.exports = factory(require('lodash'));\n  } else {\n    root.Metal = factory(root._);\n  }\n})(this, function(_) {\n  'use strict';\n\n  var _slice = Array.prototype.slice;\n\n  /**\n   * @module Metal\n   */\n  var Metal = {};\n  \n  /**\n   * Wraps the passed method so that `this._super` will point to the superMethod\n   * when the method is invoked.\n   *\n   * @private\n   * @method wrap\n   * @param {Function} method - The method to call.\n   * @param {Function} superMethod - The super method.\n   * @return {Function} - wrapped function.\n   */\n  function wrap(method, superMethod) {\n    return function() {\n      var prevSuper = this._super;\n      this._super = superMethod;\n      var ret = method.apply(this, arguments);\n      this._super = prevSuper;\n      return ret;\n    };\n  }\n  \n  /**\n   * A reference to safe regex for checking if a function calls `_super`.\n   *\n   * @private\n   * @const {RegExp}\n   */\n  var superTest = (/xyz/.test(function(){return 'xyz';})) ? /\\b_super\\b/ : /.*/;\n  \n  /**\n   * Assigns properties of source object to destination object, wrapping methods\n   * that call their super method.\n   *\n   * @private\n   * @method wrapAll\n   * @param {Object} dest - The destination object.\n   * @param {Object} source - The source object.\n   */\n  function wrapAll(dest, source) {\n    var keys = _.keys(source),\n        length = keys.length,\n        i, name, method, superMethod, hasSuper;\n  \n    // Return if source object is empty\n    if (length === 0) {\n      return;\n    }\n  \n    for (i = 0; i < length; i++) {\n      name = keys[i];\n      method = source[name];\n      superMethod = dest[name];\n  \n      // Test if new method calls `_super`\n      hasSuper = superTest.test(method);\n  \n      // Only wrap the new method if the original method was a function and the\n      // new method calls `_super`.\n      if (hasSuper && _.isFunction(method) && _.isFunction(superMethod)) {\n        dest[name] = wrap(method, superMethod);\n  \n      // Otherwise just add the new method or property to the object.\n      } else {\n        dest[name] = method;\n      }\n    }\n  }\n  \n  /**\n   * Creates a new Class.\n   *\n   * ```js\n   * var MyClass = Class.extend({\n   *   initialize() {\n   *     console.log('Created!');\n   *   }\n   * });\n   *\n   * new MyClass();\n   * // >> Created!\n   * ```\n   *\n   * @public\n   * @class Class\n   * @memberOf Metal\n   */\n  var Class = Metal.Class = function() {\n    this.initialize(...arguments);\n  };\n  \n  /**\n   * An overridable method called when objects are instantiated. Does not do\n   * anything by default.\n   *\n   * @public\n   * @abstract\n   * @method initialize\n   */\n  Class.prototype.initialize = _.noop;\n  \n  _.assign(Class, {\n  \n    /**\n     * Creates a new subclass.\n     *\n     * ```js\n     * var MyClass = Class.extend({\n     *   // ...\n     * });\n     *\n     * var myClass = new MyClass();\n     * myClass instanceof MyClass\n     * // true\n     * myClass instanceof Class\n     * // true\n     * ```\n     *\n     * @public\n     * @static\n     * @method extend\n     * @param {Object} [protoProps] - The properties to be added to the prototype.\n     * @param {Object} [staticProps] - The properties to be added to the constructor.\n     */\n    extend(protoProps, staticProps) {\n      var Parent = this;\n      var Child;\n  \n      // The constructor function for the new subclass is either defined by you\n      // (the \"constructor\" property in your `extend` definition), or defaulted\n      // by us to simply call the parent's constructor.\n      if (!protoProps || !_.has(protoProps, 'constructor')) {\n        Child = function() { Parent.apply(this, arguments); };\n      } else if (superTest.test(protoProps.constructor)) {\n        Child = wrap(protoProps.constructor, Parent.prototype.constructor);\n      } else {\n        Child = protoProps.constructor;\n      }\n  \n      // Add static properties to the constructor function, if supplied.\n      _.assign(Child, Parent);\n      wrapAll(Child, staticProps);\n  \n      // Set the prototype chain to inherit from `parent`, without calling\n      // `parent`'s constructor function.\n      var Surrogate = function() { this.constructor = Child; };\n      Surrogate.prototype = Parent.prototype;\n      Child.prototype = new Surrogate();\n  \n      // Add prototype properties (instance properties) to the subclass,\n      // if supplied.\n      wrapAll(Child.prototype, protoProps);\n  \n      // Set a convenience property in case the parent class is needed later.\n      Child.superclass = Parent;\n  \n      // Set a convenience property in case the parent's prototype is needed\n      // later.\n      Child.__super__ = Parent.prototype;\n  \n      return Child;\n    },\n  \n    /**\n     * Mixes properties onto the class's prototype.\n     *\n     * ```js\n     * var MyMixin = new Mixin({\n     *   alert() {\n     *     console.log('Alert!');\n     *   }\n     * });\n     *\n     * var MyClass = Class.extend({\n     *   initialize() {\n     *     this.alert();\n     *   }\n     * });\n     *\n     * MyClass.mixin(MyMixin);\n     *\n     * new MyClass();\n     * // >> Alert!\n     * ```\n     *\n     * @public\n     * @static\n     * @method mixin\n     * @param {Object} protoProps - The properties to be added to the prototype.\n     * @return {Class} - The class.\n     */\n    mixin(protoProps) {\n      // Add prototype properties (instance properties) to the class, if supplied.\n      wrapAll(this.prototype, protoProps);\n      return this;\n    },\n  \n    /**\n     * Mixes properties onto the class's constructor.\n     *\n     * ```js\n     * var MyMixin = new Mixin({\n     *   alert() {\n     *     console.log('Alert!');\n     *   }\n     * });\n     *\n     * var MyClass = Class.extend(...);\n     *\n     * MyClass.include(MyMixin);\n     *\n     * MyClass.alert();\n     * // >> Alert!\n     * ```\n     *\n     * You can also simply pass a plain javascript object.\n     *\n     * ```js\n     * var MyClass = Class.extend(...);\n     *\n     * MyClass.include({\n     *   alert() {\n     *     console.log('Alert!');\n     *   }\n     * });\n     *\n     * MyClass.alert();\n     * // >> Alert!\n     * ```\n     *\n     * @public\n     * @static\n     * @method mixin\n     * @param {Object} protoProps - The properties to be added to the constructor.\n     * @return {Class} - The class.\n     */\n    include(staticProps) {\n      // Add static properties to the constructor function, if supplied.\n      wrapAll(this, staticProps);\n      return this;\n    }\n  });\n  \n  /**\n   * Allows you to create mixins, whose properties can be added to other classes.\n   *\n   * @public\n   * @class Mixin\n   * @memberOf Metal\n   * @param {Object} protoProps - The properties to be added to the prototype.\n   */\n  var Mixin = Metal.Mixin = function(protoProps) {\n    // Add prototype properties (instance properties) to the class, if supplied.\n    _.assign(this, protoProps);\n  };\n  \n  /**\n   * @private\n   * @const {String[]}\n   */\n  var errorProps = [\n    'description', 'fileName', 'lineNumber', 'name', 'message', 'number'\n  ];\n  \n  /**\n   * A subclass of the JavaScript Error. Can also add a url based on the urlRoot.\n   *\n   * ```js\n   * throw new Metal.Error('Oh you\\'ve really done it now...');\n   * // Uncaught Metal.Error: Oh you've really done it now...\n   * //   [stack trace]\n   * ```\n   *\n   * @class Error\n   * @memberOf Metal\n   * @extends Error\n   * @uses Metal.Class\n   */\n  var Err = Metal.Error = Class.extend.call(Error, {\n  \n    /**\n     * @property {String} urlRoot - The root url to be used in the error message.\n     */\n    urlRoot: 'http://github.com/thejameskyle/metal.js',\n  \n    /**\n     * @public\n     * @constructs Error\n     * @param {String} [message] - A description of the error.\n     * @param {Object} [options] - Settings for the error.\n     * @param {String} [options.message] - A description of the error.\n     * @param {String} [options.url] - The url to visit for more help.\n     */\n    constructor(message, options = {}) {\n      // If options are provided in place of a message, assume message exists on\n      // options.\n      if (_.isObject(message)) {\n        options = message;\n        message = options.message;\n      }\n  \n      // Create a fake error with message in order to capture a stack trace.\n      var error = Error.call(this, message);\n  \n      // Copy over all the error-related properties.\n      _.assign(this, _.pick(error, errorProps), _.pick(options, errorProps));\n  \n      // Adds a `stack` property to the given error object that will yield the\n      // stack trace at the time captureStackTrace was called.\n      // When collecting the stack trace all frames above the topmost call\n      // to this function, including that call, will be left out of the\n      // stack trace.\n      // This is useful because we can hide Metal implementation details\n      // that are not very helpful for the user.\n      this.captureStackTrace();\n  \n      // Add url property to error, if provided.\n      if (options.url) {\n        this.url = this.urlRoot + options.url;\n      }\n    },\n  \n    /**\n     * A safe reference to V8's `Error.captureStackTrace`.\n     *\n     * @public\n     * @method captureStackTrace\n     */\n    captureStackTrace() {\n      // Error.captureStackTrace does not exist in all browsers.\n      if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, Err);\n      }\n    },\n  \n    /**\n     * Formats the error message to display in the console.\n     *\n     * @public\n     * @method toString\n     * @returns {String} - Formatted error message.\n     */\n    toString() {\n      return `${this.name}: ${this.message}` + (\n        this.url ? ` See: ${this.url}` : ''\n      );\n    }\n  });\n  \n  /**\n   * @class Error\n   * @mixes Class\n   */\n  _.assign(Err, Class);\n  \n  /**\n   * Display a deprecation warning with the provided message.\n   *\n   * @public\n   * @method deprecate\n   * @param {String|Object} message - A description of the deprecation.\n   * @param {String} message.prev - The deprecated item.\n   * @param {String} message.next - The replacement for the deprecated item.\n   * @param {String} [message.url] - The url to visit for more help.\n   * @param {Boolean} [test] - An optional boolean. If falsy, the deprecation will be displayed.\n   */\n  var deprecate = Metal.deprecate = function(message, test) {\n  \n    // Returns if test is provided and is falsy.\n    if (test !== undefined && test) {\n      return;\n    }\n  \n    // If message is provided as an object, format the object into a string.\n    if (_.isObject(message)) {\n      message = deprecate._format(message.prev, message.next, message.url);\n    }\n  \n    // Ensure that message is a string\n    message = message && message.toString();\n  \n    // If deprecation message has not already been warned, send the warning.\n    if (!deprecate._cache[message]) {\n      deprecate._warn(`Deprecation warning: ${message}`);\n      deprecate._cache[message] = true;\n    }\n  };\n  \n  /**\n   * Format a message for deprecate.\n   *\n   * @private\n   * @method _format\n   * @memberOf deprecate\n   * @param {String} prev - The deprecated item.\n   * @param {String} next - The replacement for the deprecated item.\n   * @param {String} [url] - The url to visit for more help.\n   * @return {Sring} - The formatted message.\n   */\n  deprecate._format = function(prev, next, url) {\n    return (\n      `${prev} is going to be removed in the future. ` +\n      `Please use ${next} instead.` +\n      (url ? ` See: ${url}` : '')\n    );\n  };\n  \n  /**\n   * A safe reference to `console.warn` that will fallback to `console.log` or\n   * `_noop` if the `console` object does not exist.\n   *\n   * @private\n   * @method _warn\n   * @memberOf deprecate\n   * @param {*...} - The values to warn in the console.\n   */\n  if (typeof console !== 'undefined') {\n    deprecate._warn = console.warn || console.log;\n  }\n  \n  // If `console.warn` and `console.log` weren't found, just noop.\n  if (!deprecate._warn) {\n    deprecate._warn = _.noop;\n  }\n  \n  /**\n   * An internal cache to avoid sending the same deprecation warning multiple\n   * times.\n   *\n   * @private\n   * @property _cache\n   * @memberOf deprecate\n   */\n  deprecate._cache = {};\n  \n  _.mixin({\n  \n    /**\n     * Checks if `value` is a Metal Class.\n     *\n     * ```js\n     * _.isClass(Class.extend(...));\n     * // >> true\n     * _.isClass(new Class());\n     * // >> true\n     * _.isClass(function() {...});\n     * // >> false\n     * _.isClass({...});\n     * // >> false\n     * ```\n     * @public\n     * @method isClass\n     * @memberOf _\n     * @param {*} value - The value to check.\n     */\n    isClass(value) {\n      return !!value && (value instanceof Class || value.prototype instanceof Class);\n    },\n  \n    /**\n     * Checks if `value` is a Metal Mixin.\n     *\n     * ```js\n     * _.isMixin(new Mixin());\n     * // >> true\n     * _.isMixin({});\n     * // >> false\n     * _.isMixin(function() {...});\n     * // >> false\n     * _.isMixin(new Class());\n     * // >> false\n     * ```\n     *\n     * @public\n     * @method isMixin\n     * @memberOf _\n     * @param {*} value - The value to check.\n     */\n    isMixin(value) {\n      return !!value && value instanceof Mixin;\n    }\n  });\n  \n  return Metal;\n});\n"],"sourceRoot":"/source/"}